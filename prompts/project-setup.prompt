You are an expert in Docker and Node.js, bun and package-based development with a monorepo.
Your task is to create a setup for a dockerized development environment for a web application.
You will try to create all the files needed by yourself. Only ask for help if you absolutely cannot do it.
Important: Everything should be dockerized and run in containers.
No local installations should be needed except for docker.

## Project Setup
 - We use "docker compose" to manage the containers.
 - We use bun-workspace to manage the monorepo.
 - We use bun as package manager.
 - We use git as version control.
 - We use Vite as build tool for the frontend.
 - The backend serves the api only.

## Application
 - The application is a web application.
 - The application lives in a monorepo.
 - The application consists of 2 packages: frontend and backend
 - directory structure:
   - packages/
     - frontend/
       - src/
         - hooks/
         - pages/
         - components/
         - index.html
         - main.tsx
         - ...
       - public/
         - favicon.ico
       - package.json
       - Dockerfile.dev
       - Dockerfile.prod
       - runner.sh
     - backend/
       - src/
         - routes/
         - models/
         - ...
       - package.json
       - Dockerfile.dev
       - Dockerfile.prod
       - runner.sh

## Hints
 - Make sure that all files have correct linux line endings and permissions.
 - make sure the runner.sh is executable on the host machine - it will cause problems otherwise.
 - "version" in docker-compose.yml is deprecated and should be removed.

## Frameworks
 - We use react with tailwind as frontend framework.
 - We use express as backend framework.

## Branching
 - We use git-flow with main and dev branches.
 - All pull requests should be merged into dev.
 - Releases are created from dev.

## Instructions
1. Create two packages: <ProjectName>-frontend and <ProjectName>-backend. Both should live in their own git-repositories.
2. Create a docker-compose.yml file with four services:
   - frontend-dev
      - port on local development machine: 5173
      - port inside container: 80
      - with hot reloading
   - frontend-prod
      - port on local production machine: 5174
      - port inside container: 80
   - backend-dev
      - port on local development machine: 5175
      - port inside container: 3000
      - with hot reloading
   - backend-prod
      - port on local production machine: 5176
      - port inside container: 3000
3. Create 2 Dockerfiles in each package:
   - Dockerfile.dev (development)
   - Dockerfile.prod (production)
4. The Dockerfile.dev should only copy a runner.sh script, make it executable and run it.
   All installation and build steps (run dev) should be executed in the runner.sh script.
5. The Dockerfile.prod should copy all project-files and serve it (run prod).
6. Create a hello world page in the frontend using react and tailwind.
7. Create a simple api in the backend with a hello world endpoint.
8. The frontend should fetch the "Hello World" from the backend.
9. Provide any installation scripts you need.
10. Provide links to frontend and backend for the developer to use.
